{"ast":null,"code":"import { actionType } from \"../Helper\";\nconst initialState = {\n  colorID: '',\n  one_product: [],\n  allProducts: [],\n  filters: {}\n};\nexport const productReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case actionType.FETCH_ONE_PRODUCT:\n      // console.log('[reducer] fetch one products', action.payload)\n      return {\n        ...state,\n        one_product: action.payload\n      };\n    case actionType.FETCH_ALL_PRODUCTS:\n      // console.log('[reducer] fetch all products', action.payload)\n      return {\n        ...state,\n        allProducts: action.payload\n      };\n    case actionType.GET_FILTERS:\n      // console.log('[reducers] get all filters', action.payload);\n      return {\n        ...state,\n        filters: action.payload\n      };\n    case actionType.UPDATE_FILTERS:\n      // The code is handling an action where a filter checkbox has been clicked.\n      // It copies the current filters from state to a temporary variable,\n      // and then iterates over each filter item to check whether the checkbox has been checked or unchecked.\n      // If the checkbox is checked, then the corresponding filter item in the temporary variable is updated\n      // to reflect the change.\n      const temp = {\n        ...state.filters\n      };\n      console.log(temp);\n      for (const key of Object.keys(temp)) {\n        temp[key].forEach(e => {\n          if (e.name === action.payload) {\n            e.isChecked = !e.isChecked;\n          }\n        });\n      }\n      return {\n        ...state,\n        filters: temp\n      };\n    case actionType.FETCH_ALL_PRODUCTS_WITH_FILTER:\n      {\n        return {\n          ...state,\n          allProducts: action.payload\n        };\n      }\n    default:\n      return {\n        ...state\n      };\n  }\n};","map":{"version":3,"names":["actionType","initialState","colorID","one_product","allProducts","filters","productReducer","state","action","type","FETCH_ONE_PRODUCT","payload","FETCH_ALL_PRODUCTS","GET_FILTERS","UPDATE_FILTERS","temp","console","log","key","Object","keys","forEach","e","name","isChecked","FETCH_ALL_PRODUCTS_WITH_FILTER"],"sources":["/Users/phe/WebstormProjects/lululemon-latest-version/lulu-front/lululemon/src/reducers/productReducer.js"],"sourcesContent":["import {actionType} from \"../Helper\";\n\nconst initialState = {\n    colorID: '',\n    one_product: [],\n    allProducts: [],\n    filters: {},\n}\n\nexport const productReducer = (state=initialState, action) => {\n    switch (action.type) {\n        case actionType.FETCH_ONE_PRODUCT:\n            // console.log('[reducer] fetch one products', action.payload)\n            return {...state, one_product: action.payload};\n        case actionType.FETCH_ALL_PRODUCTS:\n            // console.log('[reducer] fetch all products', action.payload)\n            return {...state, allProducts: action.payload};\n        case actionType.GET_FILTERS:\n            // console.log('[reducers] get all filters', action.payload);\n            return {...state, filters: action.payload};\n        case actionType.UPDATE_FILTERS:\n            // The code is handling an action where a filter checkbox has been clicked.\n            // It copies the current filters from state to a temporary variable,\n            // and then iterates over each filter item to check whether the checkbox has been checked or unchecked.\n            // If the checkbox is checked, then the corresponding filter item in the temporary variable is updated\n            // to reflect the change.\n            const temp = {...state.filters}\n            console.log(temp)\n            for (const key of Object.keys(temp)) {\n                temp[key].forEach(e => {\n                    if (e.name === action.payload) {\n                        e.isChecked = !e.isChecked\n                    }\n                })\n            }\n            return {...state,filters: temp}\n        case actionType.FETCH_ALL_PRODUCTS_WITH_FILTER:{\n            return {...state, allProducts: action.payload};\n        }\n\n        default:\n            return {...state}\n    }\n}"],"mappings":"AAAA,SAAQA,UAAU,QAAO,WAAW;AAEpC,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAE,EAAE;EACXC,WAAW,EAAE,EAAE;EACfC,WAAW,EAAE,EAAE;EACfC,OAAO,EAAE,CAAC;AACd,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,YAAgC;EAAA,IAA/BC,KAAK,uEAACN,YAAY;EAAA,IAAEO,MAAM;EACrD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKT,UAAU,CAACU,iBAAiB;MAC7B;MACA,OAAO;QAAC,GAAGH,KAAK;QAAEJ,WAAW,EAAEK,MAAM,CAACG;MAAO,CAAC;IAClD,KAAKX,UAAU,CAACY,kBAAkB;MAC9B;MACA,OAAO;QAAC,GAAGL,KAAK;QAAEH,WAAW,EAAEI,MAAM,CAACG;MAAO,CAAC;IAClD,KAAKX,UAAU,CAACa,WAAW;MACvB;MACA,OAAO;QAAC,GAAGN,KAAK;QAAEF,OAAO,EAAEG,MAAM,CAACG;MAAO,CAAC;IAC9C,KAAKX,UAAU,CAACc,cAAc;MAC1B;MACA;MACA;MACA;MACA;MACA,MAAMC,IAAI,GAAG;QAAC,GAAGR,KAAK,CAACF;MAAO,CAAC;MAC/BW,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,KAAK,MAAMG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,EAAE;QACjCA,IAAI,CAACG,GAAG,CAAC,CAACG,OAAO,CAACC,CAAC,IAAI;UACnB,IAAIA,CAAC,CAACC,IAAI,KAAKf,MAAM,CAACG,OAAO,EAAE;YAC3BW,CAAC,CAACE,SAAS,GAAG,CAACF,CAAC,CAACE,SAAS;UAC9B;QACJ,CAAC,CAAC;MACN;MACA,OAAO;QAAC,GAAGjB,KAAK;QAACF,OAAO,EAAEU;MAAI,CAAC;IACnC,KAAKf,UAAU,CAACyB,8BAA8B;MAAC;QAC3C,OAAO;UAAC,GAAGlB,KAAK;UAAEH,WAAW,EAAEI,MAAM,CAACG;QAAO,CAAC;MAClD;IAEA;MACI,OAAO;QAAC,GAAGJ;MAAK,CAAC;EAAA;AAE7B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}