{"ast":null,"code":"import axios from \"axios\";\nimport { actionType, FETCH_ALL_URL, GET_FILTERS_URL } from \"../Helper\";\n//  implicit return statement\n\n// In this case, it is common to put dispatch second in the argument list,\n// after the URL. This is because the URL is specific to the getFilters function\n// and is not required for all Thunks, while dispatch is required for all Thunks.\n//\nconst getFilters = () => async dispatch => {\n  try {\n    const response = await axios.get(GET_FILTERS_URL);\n    // console.log(response)\n    const data = response === null || response === void 0 ? void 0 : response.data;\n    // console.log('[redux thunk dispatch] get filters', data)\n    dispatch({\n      type: actionType.GET_FILTERS,\n      payload: data.rs\n    });\n  } catch (e) {\n    console.log('[Get filters error]', e);\n  }\n};\n\n// 1. dispatch is the first argument used, ele is the second argument (inner argument) for dispatch when the returned function is invoked.\n// 2. The function updateFilter returns a Promise, but it does not use await to wait for any asynchronous operations to\n//    complete before dispatching the action.\n\nconst updateFilter = dispatch => async ele => {\n  try {\n    dispatch({\n      type: actionType.UPDATE_FILTERS,\n      payload: ele\n    });\n    return true;\n  } catch (e) {\n    console.log('[Change filters error]', e);\n    return false;\n  }\n};\nexport default {\n  getFilters,\n  updateFilter\n};","map":{"version":3,"names":["axios","actionType","FETCH_ALL_URL","GET_FILTERS_URL","getFilters","dispatch","response","get","data","type","GET_FILTERS","payload","rs","e","console","log","updateFilter","ele","UPDATE_FILTERS"],"sources":["/Users/phe/WebstormProjects/lululemon-latest-version/lulu-front/lululemon/src/actions/filterActions.js"],"sourcesContent":["import axios from \"axios\";\nimport {actionType, FETCH_ALL_URL, GET_FILTERS_URL} from \"../Helper\";\n//  implicit return statement\n\n// In this case, it is common to put dispatch second in the argument list,\n// after the URL. This is because the URL is specific to the getFilters function\n// and is not required for all Thunks, while dispatch is required for all Thunks.\n//\nconst getFilters = () => async dispatch  => {\n    try {\n        const response = await axios.get(GET_FILTERS_URL)\n        // console.log(response)\n        const data = response?.data;\n        // console.log('[redux thunk dispatch] get filters', data)\n        dispatch({\n            type: actionType.GET_FILTERS,\n            payload: data.rs\n        })\n    } catch (e) {\n        console.log('[Get filters error]',e)\n    }\n}\n\n\n// 1. dispatch is the first argument used, ele is the second argument (inner argument) for dispatch when the returned function is invoked.\n// 2. The function updateFilter returns a Promise, but it does not use await to wait for any asynchronous operations to\n//    complete before dispatching the action.\n\nconst updateFilter = (dispatch) => async (ele) => {\n    try {\n        dispatch({\n            type:actionType.UPDATE_FILTERS,\n            payload:ele\n        })\n        return true\n    }catch (e) {\n        console.log('[Change filters error]', e)\n        return false\n    }\n}\n\n\n\nexport default {\n    getFilters,\n    updateFilter,\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,UAAU,EAAEC,aAAa,EAAEC,eAAe,QAAO,WAAW;AACpE;;AAEA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,MAAM,MAAMC,QAAQ,IAAK;EACxC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACJ,eAAe,CAAC;IACjD;IACA,MAAMK,IAAI,GAAGF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,IAAI;IAC3B;IACAH,QAAQ,CAAC;MACLI,IAAI,EAAER,UAAU,CAACS,WAAW;MAC5BC,OAAO,EAAEH,IAAI,CAACI;IAClB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,CAAC,EAAE;IACRC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAACF,CAAC,CAAC;EACxC;AACJ,CAAC;;AAGD;AACA;AACA;;AAEA,MAAMG,YAAY,GAAIX,QAAQ,IAAK,MAAOY,GAAG,IAAK;EAC9C,IAAI;IACAZ,QAAQ,CAAC;MACLI,IAAI,EAACR,UAAU,CAACiB,cAAc;MAC9BP,OAAO,EAACM;IACZ,CAAC,CAAC;IACF,OAAO,IAAI;EACf,CAAC,QAAOJ,CAAC,EAAE;IACPC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,CAAC,CAAC;IACxC,OAAO,KAAK;EAChB;AACJ,CAAC;AAID,eAAe;EACXT,UAAU;EACVY;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}